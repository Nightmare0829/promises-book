{"version":3,"sources":["../../src/engine/textlint-module-mapper.js"],"names":[],"mappings":";AACA;;;;;;;;;;;;;;;AAMA,IAAM,gBAAgB,GAAtB;;IACqB,oB;;;;;;;;;;;;;;;;uCASK,W,EAAa,S,EAAW;AAC1C,gBAAM,WAAW,EAAjB;AACA,mBAAO,IAAP,CAAY,WAAZ,EAAyB,OAAzB,CAAiC,kBAAU;AACvC,oBAAM,kBAAkB,YAAY,aAAZ,GAA4B,MAApD;AACA,oBAAM,cAAc,YAAY,MAAZ,CAApB;AACA,yBAAS,IAAT,CAAc,CAAC,eAAD,EAAkB,WAAlB,CAAd;AACH,aAJD;AAKA,mBAAO,QAAP;AACH;;;;;;;;;;;;2CASyB,W,EAAa,S,EAAW;AAC9C,gBAAM,SAAS,EAAf;AACA,mBAAO,IAAP,CAAY,WAAZ,EAAyB,OAAzB,CAAiC,eAAO;AACpC,uBAAU,SAAV,SAAuB,GAAvB,IAAgC,YAAY,GAAZ,CAAhC;AACH,aAFD;AAGA,mBAAO,MAAP;AACH;;;;;;kBAhCgB,oB","file":"textlint-module-mapper.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/**\n * This class is a helper to create mapping of rules and rulesConfig\n * Main purpose hide the RuleSeparator \"/\".\n */\n// The separator of `<plugin>/<rule>` \nconst RuleSeparator = \"/\";\nexport default class TextLintModuleMapper {\n    /**\n     * create entities from rules/rulesConfig and prefix\n     * entities is a array which contain [key, value]\n     * see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n     * @param {Object} pluginRules an object is like \"rules\" or \"rulesConfig\" of plugin\n     * @param {string} prefixKey prefix key is plugin name or preset name\n     * @returns {[string, string][]}\n     */\n    static createEntities(pluginRules, prefixKey) {\n        const entities = [];\n        Object.keys(pluginRules).forEach(ruleId => {\n            const qualifiedRuleId = prefixKey + RuleSeparator + ruleId;\n            const ruleCreator = pluginRules[ruleId];\n            entities.push([qualifiedRuleId, ruleCreator]);\n        });\n        return entities;\n    }\n\n    /**\n     * create an object from rules/rulesConfig and prefix\n     * the object shape is { key: value, key2: value }\n     * @param {Object} pluginRules an object is like \"rules\" or \"rulesConfig\" of plugin\n     * @param {string} prefixKey prefix key is plugin name or preset name\n     * @returns {Object}\n     */\n    static createMappedObject(pluginRules, prefixKey) {\n        const mapped = {};\n        Object.keys(pluginRules).forEach(key => {\n            mapped[`${prefixKey}/${key}`] = pluginRules[key];\n        });\n        return mapped;\n    }\n}\n"]}