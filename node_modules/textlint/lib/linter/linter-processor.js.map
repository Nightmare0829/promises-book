{"version":3,"sources":["../../src/linter/linter-processor.js"],"names":[],"mappings":";AACA;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IACqB,e;;;;;;AAKjB,6BAAY,SAAZ,EAAuB,qBAAvB,EAA8C;AAAA;;AAC1C,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,qBAAL,GAA6B,qBAA7B;AACH;;;;;;;;;;;;;;sCAUmE;AAAA;;AAAA,gBAA3D,MAA2D,QAA3D,MAA2D;AAAA,gBAAnD,cAAmD,QAAnD,cAAmD;AAAA,gBAAnC,oBAAmC,QAAnC,oBAAmC;AAAA,gBAAb,UAAa,QAAb,UAAa;;AAChE,kCAAO,UAAU,cAAV,IAA4B,UAAnC;;AADgE,uCAE9B,KAAK,SAAL,CAAe,SAAf,CAAyB,WAAW,GAApC,CAF8B;;AAAA,gBAEzD,UAFyD,wBAEzD,UAFyD;AAAA,gBAE7C,WAF6C,wBAE7C,WAF6C;;AAGhE,kCAAO,OAAO,UAAP,KAAsB,UAAtB,IAAoC,OAAO,WAAP,KAAuB,UAAlE,EACI,sDADJ;AAEA,gBAAM,OAAO,yBAAe;AACxB,8BADwB;AAExB,8CAFwB;AAGxB,0DAHwB;AAIxB;AAJwB,aAAf,CAAb;AAMA,mBAAO,qBAAW,OAAX,CAAmB,IAAnB,EAAyB,IAAzB,CAA8B,oBAAY;AAC7C,oBAAM,SAAS,YAAY,QAAZ,EAAsB,WAAW,QAAjC,CAAf;AACA,uBAAO,QAAP,GAAkB,MAAK,qBAAL,CAA2B,OAA3B,CAAmC,OAAO,QAA1C,CAAlB;AACA,oBAAI,OAAO,QAAP,IAAmB,IAAvB,EAA6B;AACzB,2BAAO,QAAP,eAA4B,WAAW,GAAvC;AACH;AACD,sCAAO,OAAO,QAAP,IAAmB,OAAO,QAAP,CAAgB,MAAhB,IAA0B,CAApD,EAAuD,mDAAvD;AACA,uBAAO,MAAP;AACH,aARM,CAAP;AASH;;;;;;kBAtCgB,e","file":"linter-processor.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport assert from \"assert\";\nimport LinterTask from \"../task/linter-task\";\nimport TaskRunner from \"../task/task-runner\";\nexport default class LinterProcessor {\n    /**\n     * @param {Processor} processor\n     * @param {MessageProcessManager} messageProcessManager\n     */\n    constructor(processor, messageProcessManager) {\n        this.processor = processor;\n        this.messageProcessManager = messageProcessManager;\n    }\n\n    /**\n     * Run linter process\n     * @param {Config} config\n     * @param {RuleCreatorSet} ruleCreatorSet\n     * @param {RuleCreatorSet} filterRuleCreatorSet\n     * @param {SourceCode} sourceCode\n     * @returns {Promise.<TextLintResult>}\n     */\n    process({config, ruleCreatorSet, filterRuleCreatorSet, sourceCode}) {\n        assert(config && ruleCreatorSet && sourceCode);\n        const {preProcess, postProcess} = this.processor.processor(sourceCode.ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const task = new LinterTask({\n            config,\n            ruleCreatorSet,\n            filterRuleCreatorSet,\n            sourceCode\n        });\n        return TaskRunner.process(task).then(messages => {\n            const result = postProcess(messages, sourceCode.filePath);\n            result.messages = this.messageProcessManager.process(result.messages);\n            if (result.filePath == null) {\n                result.filePath = `<Unkown${sourceCode.ext}>`;\n            }\n            assert(result.filePath && result.messages.length >= 0, \"postProcess should return { messages, filePath } \");\n            return result;\n        });\n    }\n}\n"]}