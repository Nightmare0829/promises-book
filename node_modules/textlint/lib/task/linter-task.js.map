{"version":3,"sources":["../../src/task/linter-task.js"],"names":[],"mappings":";AACA;;;;;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AACA,IAAM,QAAQ,QAAQ,OAAR,EAAiB,2BAAjB,CAAd;;IACqB,gB;;;;;;;;;;AAOjB,oCAAwE;AAAA,YAA3D,MAA2D,QAA3D,MAA2D;AAAA,YAAnD,cAAmD,QAAnD,cAAmD;AAAA,YAAnC,oBAAmC,QAAnC,oBAAmC;AAAA,YAAb,UAAa,QAAb,UAAa;;AAAA;;AAAA;;AAEpE,cAAK,MAAL,GAAc,MAAd;AACA,cAAK,cAAL,GAAsB,cAAtB;AACA,cAAK,oBAAL,GAA4B,oBAA5B;AACA,cAAK,UAAL,GAAkB,UAAlB;AACA,cAAK,WAAL;AANoE;AAOvE;;;;gCAEO;AACJ,iBAAK,cAAL,CAAoB,KAAK,UAAzB;AACH;;;sCAEa;AAAA;;;AAEV,gBAAM,iBAAiB,KAAK,MAA5B;AACA,gBAAM,aAAa,KAAK,UAAxB;AACA,gBAAM,SAAS,KAAK,cAAL,CAAoB,UAApB,CAAf;AACA,gBAAM,eAAe,KAAK,oBAAL,CAA0B,UAA1B,CAArB;;;;AAIA,gBAAM,iBAAiB,KAAK,cAAL,CAAoB,iBAApB,EAAvB;AACA,kBAAM,gBAAN,EAAwB,cAAxB;AACA,2BAAe,OAAf,CAAuB,iBAAgC;AAAA,oBAA9B,MAA8B,SAA9B,MAA8B;AAAA,oBAAtB,IAAsB,SAAtB,IAAsB;AAAA,oBAAhB,UAAgB,SAAhB,UAAgB;;AACnD,oBAAM,cAAc,0BAAgB;AAChC,kCADgC;AAEhC,0CAFgC;AAGhC,kCAHgC;AAIhC,8CAJgC;AAKhC,kDALgC;AAMhC;AANgC,iBAAhB,CAApB;AAQA,oBAAM,aAAa,kCAAU,IAAV,CAAnB;AACA,uBAAK,kBAAL,CAAwB,UAAxB,EAAoC,WAApC,EAAiD,UAAjD;AACH,aAXD;;AAaA,kBAAM,sBAAN,EAA8B,KAAK,oBAAnC;AACA,iBAAK,oBAAL,CAA0B,OAA1B,CAAkC,iBAAgC;AAAA,oBAA9B,MAA8B,SAA9B,MAA8B;AAAA,oBAAtB,IAAsB,SAAtB,IAAsB;AAAA,oBAAhB,UAAgB,SAAhB,UAAgB;;AAC9D,oBAAM,cAAc,gCAAsB;AACtC,kCADsC;AAEtC,0CAFsC;AAGtC,8CAHsC;AAItC;AAJsC,iBAAtB,CAApB;;AAOA,oBAAM,aAAa,kCAAU,IAAV,CAAnB;AACA,uBAAK,kBAAL,CAAwB,UAAxB,EAAoC,WAApC,EAAiD,UAAjD;AACH,aAVD;AAWH;;;;;;kBAxDgB,gB","file":"linter-task.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport CoreTask from \"./textlint-core-task\";\nimport {getLinter, getFilter} from \"../core/rule-creator-helper\";\nimport RuleContext from \"../core/rule-context\";\nimport FilterRuleContext from \"../core/filter-rule-context\";\nconst debug = require(\"debug\")(\"textlint:TextLintCoreTask\");\nexport default class TextLintCoreTask extends CoreTask {\n    /**\n     * @param {Config} config\n     * @param {RuleCreatorSet} ruleCreatorSet rules and config set\n     * @param {RuleCreatorSet} filterRuleCreatorSet filter rules and config set\n     * @param {SourceCode} sourceCode\n     */\n    constructor({config, ruleCreatorSet, filterRuleCreatorSet, sourceCode}) {\n        super();\n        this.config = config;\n        this.ruleCreatorSet = ruleCreatorSet;\n        this.filterRuleCreatorSet = filterRuleCreatorSet;\n        this.sourceCode = sourceCode;\n        this._setupRules();\n    }\n\n    start() {\n        this.startTraverser(this.sourceCode);\n    }\n\n    _setupRules() {\n        // rule\n        const textLintConfig = this.config;\n        const sourceCode = this.sourceCode;\n        const report = this.createReporter(sourceCode);\n        const ignoreReport = this.createIgnoreReporter(sourceCode);\n        // setup \"rules\" field\n        // filter duplicated rules for improving experience\n        // see https://github.com/textlint/textlint/issues/219\n        const ruleCreatorSet = this.ruleCreatorSet.withoutDuplicated();\n        debug(\"ruleCreatorSet\", ruleCreatorSet);\n        ruleCreatorSet.forEach(({ruleId, rule, ruleConfig}) => {\n            const ruleContext = new RuleContext({\n                ruleId,\n                sourceCode,\n                report,\n                ignoreReport,\n                textLintConfig,\n                ruleConfig\n            });\n            const ruleModule = getLinter(rule);\n            this.tryToAddListenRule(ruleModule, ruleContext, ruleConfig);\n        });\n        // setup \"filters\" field\n        debug(\"filterRuleCreatorSet\", this.filterRuleCreatorSet);\n        this.filterRuleCreatorSet.forEach(({ruleId, rule, ruleConfig}) => {\n            const ruleContext = new FilterRuleContext({\n                ruleId,\n                sourceCode,\n                ignoreReport,\n                textLintConfig\n            });\n            // \"filters\" rule is the same with \"rules\"\n            const ruleModule = getFilter(rule);\n            this.tryToAddListenRule(ruleModule, ruleContext, ruleConfig);\n        });\n    }\n}\n"]}