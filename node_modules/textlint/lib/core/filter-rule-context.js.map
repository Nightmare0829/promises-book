{"version":3,"sources":["../../src/core/filter-rule-context.js"],"names":[],"mappings":";AACA;;;;;kBAgBwB,iB;AAfxB,IAAM,SAAS,QAAQ,QAAR,CAAf;;;;;;;;;;;;;;;AAee,SAAS,iBAAT,OAA+E;AAAA,MAAnD,MAAmD,QAAnD,MAAmD;AAAA,MAA3C,UAA2C,QAA3C,UAA2C;AAAA,MAA/B,YAA+B,QAA/B,YAA+B;AAAA,MAAjB,cAAiB,QAAjB,cAAiB;;AAC1F,SAAO,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,EAAC,OAAO,MAAR,EAAlC;AACA,SAAO,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC,EAAC,OAAO,cAAR,EAAtC;;;;;;;;AAQA,OAAK,YAAL,GAAoB,UAAU,KAAV,EAAgC;AAAA,QAAf,QAAe,yDAAJ,EAAI;;AAChD,WAAO,MAAM,OAAN,CAAc,KAAd,KAAwB,OAAO,MAAM,CAAN,CAAP,KAAoB,QAA5C,IAAwD,OAAO,MAAM,CAAN,CAAP,KAAoB,QAAnF,EACI,+CADJ;AAEA,iBAAa,EAAC,cAAD,EAAS,YAAT,EAAgB,kBAAhB,EAAb;AACH,GAJD;;;;;AASA,OAAK,MAAL,GAAc,WAAW,SAAX,EAAd;;;;;AAKA,OAAK,WAAL,GAAmB,WAAW,WAAX,CAAuB,IAAvB,CAA4B,UAA5B,CAAnB;;;;;AAKA,OAAK,SAAL,GAAiB,WAAW,SAAX,CAAqB,IAArB,CAA0B,UAA1B,CAAjB;AACH","file":"filter-rule-context.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\n/**\n * This callback is displayed as a global member.\n * @callback ReportCallback\n * @param {ReportIgnoreMessage} message\n */\n\n/**\n * Rule context object is passed to each rule as `context`\n * @param {string} ruleId\n * @param {SourceCode} sourceCode\n * @param {function(ReportIgnoreMessage)} ignoreReport\n * @param {Config} textLintConfig\n * @constructor\n */\nexport default function FilterRuleContext({ruleId, sourceCode, ignoreReport, textLintConfig}) {\n    Object.defineProperty(this, \"id\", {value: ruleId});\n    Object.defineProperty(this, \"config\", {value: textLintConfig});\n    /**\n     * report ignoring range\n     * @param {number[]} range\n     * @param {{ ruleId: string }} [optional] ignoring option object\n     * - `ruleId` match the TextLintMessage.ruleId and filter the message. (default: `ruleId` of the rule)\n     *   if `ruleId` is \"*\", match any TextLintMessage.ruleId.\n     */\n    this.shouldIgnore = function (range, optional = {}) {\n        assert(Array.isArray(range) && typeof range[0] === \"number\" && typeof range[1] === \"number\",\n            \"shouldIgnore([number, number]); accept range.\");\n        ignoreReport({ruleId, range, optional});\n    };\n    /**\n     * Node's type values\n     * @type {TextLintNodeType}\n     */\n    this.Syntax = sourceCode.getSyntax();\n    /**\n     * get file path current processing.\n     * @type {Function}\n     */\n    this.getFilePath = sourceCode.getFilePath.bind(sourceCode);\n    /**\n     * get source code text\n     * @type {Function}\n     */\n    this.getSource = sourceCode.getSource.bind(sourceCode);\n}\n"]}