{"version":3,"sources":["../../src/core/rule-context.js"],"names":[],"mappings":";AACA;;;;;kBAqBwB,W;;AAnBxB;;;;AACA;;;;AACA;;;;AACA;;;;AAJA,IAAM,SAAS,QAAQ,QAAR,CAAf;;;;;;;;;;;;;;;;;AAoBe,SAAS,WAAT,OAA+E;AAAA,MAAzD,MAAyD,QAAzD,MAAyD;AAAA,MAAjD,UAAiD,QAAjD,UAAiD;AAAA,MAArC,MAAqC,QAArC,MAAqC;AAAA,MAA7B,cAA6B,QAA7B,cAA6B;AAAA,MAAb,UAAa,QAAb,UAAa;;AAC1F,SAAO,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,EAAC,OAAO,MAAR,EAAlC;AACA,SAAO,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC,EAAC,OAAO,cAAR,EAAtC;AACA,MAAM,WAAW,+BAAY,UAAZ,CAAjB;;;;;;;AAOA,OAAK,MAAL,GAAc,UAAU,IAAV,EAAgB,SAAhB,EAA2B;AACrC,WAAO,EAAE,mCAAF,CAAP,EAAqC,sCAArC;AACA,QAAI,wCAAJ,EAAoC;AAChC,aAAO,EAAC,cAAD,EAAS,UAAT,EAAe,kBAAf,EAAyB,oBAAzB,EAAP;AACH,KAFD,MAEO;AACH,UAAM,QAAQ,UAAU,QAAV,IAAsB,wBAAc,KAAlD;AACA,aAAO,EAAC,cAAD,EAAS,UAAT,EAAe,UAAU,KAAzB,EAAgC,oBAAhC,EAAP;AACH;AACJ,GARD;;;;;AAaA,OAAK,MAAL,GAAc,WAAW,SAAX,EAAd;;;;;AAKA,OAAK,WAAL,GAAmB,WAAW,WAAX,CAAuB,IAAvB,CAA4B,UAA5B,CAAnB;;;;;AAKA,OAAK,SAAL,GAAiB,WAAW,SAAX,CAAqB,IAArB,CAA0B,UAA1B,CAAjB;;;;;AAKA,OAAK,SAAL;;;;;AAKA,OAAK,KAAL,GAAa,iCAAb;AACH","file":"rule-context.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\nimport RuleFixer from \"../fixer/rule-fixer-commaner\";\nimport RuleError from \"./rule-error\";\nimport SeverityLevel from \"../shared/type/SeverityLevel\";\nimport {getSeverity} from \"../shared/rule-severity\";\n/**\n * This callback is displayed as a global member.\n * @callback ReportCallback\n * @param {ReportMessage} message\n */\n\n/**\n * Rule context object is passed to each rule as `context`\n * @param {string} ruleId\n * @param {SourceCode} sourceCode\n * @param {ReportCallback} report\n * @param {Config} textLintConfig\n * @param {Object|boolean} ruleConfig\n * @constructor\n */\nexport default function RuleContext({ruleId, sourceCode, report, textLintConfig, ruleConfig}) {\n    Object.defineProperty(this, \"id\", {value: ruleId});\n    Object.defineProperty(this, \"config\", {value: textLintConfig});\n    const severity = getSeverity(ruleConfig);\n\n    /**\n     * report function that is called in a rule\n     * @param {TxtNode} node\n     * @param {RuleError|any} ruleError error is a RuleError instance or any data\n     */\n    this.report = function (node, ruleError) {\n        assert(!(node instanceof RuleError), \"should be `report(node, ruleError);`\");\n        if (ruleError instanceof RuleError) {\n            report({ruleId, node, severity, ruleError});\n        } else {\n            const level = ruleError.severity || SeverityLevel.error;\n            report({ruleId, node, severity: level, ruleError});\n        }\n    };\n    /**\n     * Node's type values\n     * @type {TextLintNodeType}\n     */\n    this.Syntax = sourceCode.getSyntax();\n    /**\n     * get file path current processing.\n     * @type {Function}\n     */\n    this.getFilePath = sourceCode.getFilePath.bind(sourceCode);\n    /**\n     * get source code text\n     * @type {Function}\n     */\n    this.getSource = sourceCode.getSource.bind(sourceCode);\n    /**\n     * CustomError object\n     * @type {RuleError}\n     */\n    this.RuleError = RuleError;\n    /**\n     * Rule fixer command object\n     * @type {RuleFixer}\n     */\n    this.fixer = new RuleFixer();\n}\n"]}