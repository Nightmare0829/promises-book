{"version":3,"sources":["../../src/core/rule-creator-set.js"],"names":[],"mappings":"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","file":"rule-creator-set.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst deepEqual = require(\"deep-equal\");\nconst MapLike = require(\"map-like\");\nimport {assertRuleShape, hasFixer} from \"./rule-creator-helper\";\nconst filterByAvailable = (rules, rulesConfig) => {\n    const resultRules = Object.create(null);\n    Object.keys(rules).forEach(key => {\n        const ruleCreator = rules[key];\n        assertRuleShape(ruleCreator, key);\n        // \"rule-name\" : false => disable\n        const ruleConfig = rulesConfig && rulesConfig[key];\n        if (ruleConfig !== false) {\n            resultRules[key] = rules[key];\n        }\n    });\n    return resultRules;\n};\n\n/**\n * Manage RuleCreator*s* object and RuleOption*s*\n */\nexport default class RuleCreatorSet {\n    /**\n     * @param {Object} rules\n     * @param {Object} [rulesConfig]\n     * @constructor\n     */\n    constructor(rules = {}, rulesConfig = {}) {\n        this.rawRulesObject = rules;\n        this.rawRulesConfigObject = rulesConfig;\n        /**\n         * available rule object\n         * @type {Object}\n         */\n        this.rules = filterByAvailable(this.rawRulesObject, this.rawRulesConfigObject);\n        /**\n         * rule key names\n         * @type {Array}\n         */\n        this.ruleNames = Object.keys(this.rules);\n        /**\n         * rules Config object\n         * @type {Object}\n         */\n        this.rulesConfig = this._normalizeRulesConfig(this.ruleNames, this.rawRulesConfigObject);\n    }\n\n    /**\n     * filter duplicated rules and rulesConfig and return new RuleCreatorSet.\n     * @return {RuleCreatorSet}\n     */\n    withoutDuplicated() {\n        const newRawRules = {};\n        const newRawRulesConfig = {};\n        // for index\n        const addedRuleMap = new MapLike();\n        // if already contain same ruleModule and ruleConfig value\n        // Fill following condition, remove it\n        // 1. same ruleModule\n        // 2. same ruleConfig\n        this.ruleNames.forEach(ruleName => {\n            const rule = this.rules[ruleName];\n            const ruleConfig = this.rulesConfig[ruleName];\n            const savedConfigList = addedRuleMap.has(rule) ? addedRuleMap.get(rule) : [];\n            // same ruleCreator and ruleConfig\n            const hasSameConfig = savedConfigList.some(savedConfig => {\n                return deepEqual(savedConfig, ruleConfig, {strict: true});\n            });\n            if (hasSameConfig) {\n                return false;\n            }\n            newRawRules[ruleName] = rule;\n            newRawRulesConfig[ruleName] = ruleConfig;\n            // saved\n            savedConfigList.push(ruleConfig);\n            addedRuleMap.set(rule, savedConfigList);\n        });\n        addedRuleMap.clear();\n        return new RuleCreatorSet(newRawRules, newRawRulesConfig);\n    }\n\n    /**\n     * forEach method\n     * @example\n     *  ruleCreatorSet.forEach(({ruleId, rule, ruleConfig}) => {\n     *      // \n     *  });\n     * @param {function({ ruleId: string, rule: Function, ruleConfig: Object|boolean})} handler\n     */\n    forEach(handler) {\n        return this.ruleNames.forEach(ruleName => {\n            return handler({\n                ruleId: ruleName,\n                rule: this.rules[ruleName],\n                ruleConfig: this.rulesConfig[ruleName]\n            });\n        });\n    }\n\n    getFixerNames() {\n        return this.ruleNames.filter(ruleName => {\n            return hasFixer(this.rules[ruleName]);\n        });\n    }\n\n    mapFixer(mapHandler) {\n        return this.getFixerNames().map(ruleName => {\n            const rules = {[ruleName]: this.rules[ruleName]};\n            const rulesConfig = {[ruleName]: this.rulesConfig[ruleName]};\n            return mapHandler(new RuleCreatorSet(rules, rulesConfig));\n        });\n    }\n\n    /**\n     * normalize `rawRulesConfigObject`.\n     * if `rawRulesConfigObject` has not the rule, create `{ ruleName: true }` by default\n     * @param {string[]} ruleNames\n     * @param {Object[]} rawRulesConfigObject\n     * @private\n     */\n    _normalizeRulesConfig(ruleNames, rawRulesConfigObject) {\n        const rulesConfig = {};\n        // default: { ruleName: true }\n        const defaultRuleConfigValue = true;\n        ruleNames.forEach(ruleName => {\n            if (rawRulesConfigObject[ruleName] === undefined) {\n                rulesConfig[ruleName] = defaultRuleConfigValue;\n            } else {\n                rulesConfig[ruleName] = rawRulesConfigObject[ruleName];\n            }\n        });\n        return rulesConfig;\n    }\n}\n"]}