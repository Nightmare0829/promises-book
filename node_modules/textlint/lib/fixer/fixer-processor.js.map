{"version":3,"sources":["../../src/fixer/fixer-processor.js"],"names":[],"mappings":"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","file":"fixer-processor.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst debug = require(\"debug\")(\"textlint:fixer-processor\");\nimport assert from \"assert\";\nimport FixerTask from \"../task/fixer-task\";\nimport SourceCode from \"../core/source-code\";\nimport SourceCodeFixer from \"../fixer/source-code-fixer\";\nimport TaskRunner from \"../task/task-runner\";\nexport default class FixerProcessor {\n    /**\n     * @param {Processor} processor\n     * @param {MessageProcessManager} messageProcessManager\n     */\n    constructor(processor, messageProcessManager) {\n        this.processor = processor;\n        this.messageProcessManager = messageProcessManager;\n    }\n\n    /**\n     * Run fixer process\n     * @param {Config} config\n     * @param {RuleCreatorSet} ruleCreatorSet\n     * @param {RuleCreatorSet} filterRuleCreatorSet\n     * @param {SourceCode} sourceCode\n     * @returns {Promise.<TextLintFixResult>}\n     */\n    process({config, ruleCreatorSet, filterRuleCreatorSet, sourceCode}) {\n        assert(config && ruleCreatorSet && sourceCode);\n        const {preProcess, postProcess} = this.processor.processor(sourceCode.ext);\n        // messages\n        let resultFilePath = sourceCode.filePath;\n        // applied fixing messages\n        // Revert = Sequentially apply applied message to applied output\n        // SourceCodeFixer.sequentiallyApplyFixes(fixedOutput, result.applyingMessages);\n        const applyingMessages = [];\n        // not applied fixing messages\n        const remainingMessages = [];\n        // original means original for applyingMessages and remainingMessages\n        // pre-applyingMessages + remainingMessages\n        const originalMessages = [];\n        const fixerProcessList = ruleCreatorSet.mapFixer(fixerRuleCreatorSet => {\n            return (sourceText) => {\n                // create new SourceCode object\n                const newSourceCode = new SourceCode({\n                    text: sourceText,\n                    ast: preProcess(sourceText),\n                    filePath: resultFilePath,\n                    ext: sourceCode.ext\n                });\n                // create new Task\n                const task = new FixerTask({\n                    config,\n                    ruleCreatorSet: fixerRuleCreatorSet,\n                    filterRuleCreatorSet,\n                    sourceCode: newSourceCode\n                });\n\n                return TaskRunner.process(task).then(messages => {\n                    const result = postProcess(messages, sourceCode.filePath);\n                    result.messages = this.messageProcessManager.process(result.messages);\n                    if (result.filePath == null) {\n                        result.filePath = `<Unkown${sourceCode.ext}>`;\n                    }\n                    resultFilePath = result.filePath;\n                    const applied = SourceCodeFixer.applyFixes(newSourceCode, result.messages);\n                    // add messages\n                    Array.prototype.push.apply(applyingMessages, applied.applyingMessages);\n                    Array.prototype.push.apply(remainingMessages, applied.remainingMessages);\n                    Array.prototype.push.apply(originalMessages, applied.messages);\n                    // if not fixed, still use current sourceText\n                    if (!applied.fixed) {\n                        return sourceText;\n                    }\n                    // if fixed, use fixed text at next\n                    return applied.output;\n                });\n            };\n        });\n\n        const promiseTask = fixerProcessList.reduce((promise, fixerProcess) => {\n            return promise.then((sourceText) => {\n                return fixerProcess(sourceText);\n            });\n        }, Promise.resolve(sourceCode.text));\n\n        return promiseTask.then(output => {\n            debug(`Finish Processing: ${resultFilePath}`);\n            debug(`applyingMessages: ${applyingMessages.length}`);\n            debug(`remainingMessages: ${remainingMessages.length}`);\n            return {\n                filePath: resultFilePath,\n                output,\n                messages: originalMessages,\n                applyingMessages,\n                remainingMessages\n            };\n        });\n    }\n}\n"]}