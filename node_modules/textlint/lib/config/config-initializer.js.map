{"version":3,"sources":["../../src/config/config-initializer.js"],"names":[],"mappings":";AACA;;AACA,IAAM,UAAU,QAAQ,UAAR,CAAhB;AACA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,eAAe,QAAQ,eAAR,CAArB;AACA,IAAM,YAAY,QAAQ,aAAR,CAAlB;AACA,IAAM,SAAS,QAAQ,kBAAR,CAAf;AACA,IAAM,UAAU,QAAQ,UAAR,CAAhB;AACA,IAAM,SAAS,QAAQ,gBAAR,CAAf;;;;;;;AAOA,IAAM,6BAA6B,SAA7B,0BAA6B,CAAC,GAAD,EAAS;AACxC,WAAO,QAAQ,GAAR,EAAa,IAAb,CAAkB,eAAO;AAC5B,YAAM,eAAe,IAAI,YAAJ,IAAoB,EAAzC;AACA,YAAM,kBAAkB,IAAI,eAAJ,IAAuB,EAA/C;AACA,YAAM,qBAAqB,aAAa,EAAb,EAAiB,YAAjB,EAA+B,eAA/B,CAA3B;AACA,YAAM,WAAW,OAAO,IAAP,CAAY,kBAAZ,CAAjB;AACA,eAAO,SAAS,MAAT,CAAgB,mBAAW;AAC9B,gBAAM,eAAe,QAAQ,OAAR,CAAgB,OAAO,uBAAvB,MAAoD,CAAC,CAArD,IAA0D,QAAQ,OAAR,CAAgB,OAAO,gBAAvB,MAA6C,CAAC,CAA7H;AACA,gBAAI,YAAY,sBAAhB,EAAwC;AACpC,uBAAO,KAAP;AACH;AACD,mBAAO,YAAP;AACH,SANM,CAAP;AAOH,KAZM,EAYJ,KAZI,CAYE,YAAM;AACX,eAAO,EAAP;AACH,KAdM,CAAP;AAeH,CAhBD;;;;;;;;AAwBA,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,KAAD,EAAQ,YAAR,EAAyB;AAC3C,QAAM,SAAS,EAAf;AACA,UAAM,OAAN,CAAc,gBAAQ;AAClB,eAAO,IAAP,IAAe,YAAf;AACH,KAFD;AAGA,WAAO,MAAP;AACH,CAND;;;;AAUA,IAAM,OAAO;;;;;;;AAMT,oBANS,4BAMQ,GANR,EAMa;AAClB,eAAO,2BAA2B,GAA3B,EAAgC,IAAhC,CAAqC,oBAAY;AACpD,gBAAM,SAAS,MAAM,OAAO,gBAAb,GAAgC,IAA/C;AACA,gBAAM,WAAW,KAAK,OAAL,CAAa,GAAb,EAAkB,MAAlB,CAAjB;AACA,gBAAI,UAAU,QAAV,CAAJ,EAAyB;AACrB,uBAAO,KAAP,CAAiB,MAAjB;AACA,uBAAO,QAAQ,OAAR,CAAgB,CAAhB,CAAP;AACH;AACD,gBAAM,UAAU,SAAS,MAAT,CAAgB,mBAAW;AACvC,uBAAO,QAAQ,OAAR,CAAgB,OAAO,uBAAvB,MAAoD,CAAC,CAA5D;AACH,aAFe,EAEb,GAFa,CAET,sBAAc;AACjB,uBAAO,WAAW,OAAX,CAAmB,OAAO,uBAA1B,EAAmD,EAAnD,CAAP;AACH,aAJe,CAAhB;AAKA,gBAAM,QAAQ,SAAS,MAAT,CAAgB,mBAAW;AACrC,uBAAO,QAAQ,OAAR,CAAgB,OAAO,gBAAvB,MAA6C,CAAC,CAArD;AACH,aAFa,EAEX,GAFW,CAEP,sBAAc;AACjB,uBAAO,WAAW,OAAX,CAAmB,OAAO,gBAA1B,EAA4C,EAA5C,CAAP;AACH,aAJa,CAAd;AAKA,gBAAM,oBAAoB;AACtB,2BAAW,cAAc,OAAd,EAAuB,IAAvB,CADW;AAEtB,yBAAS,cAAc,KAAd,EAAqB,IAArB;AAFa,aAA1B;AAIA,gBAAM,SAAS,KAAK,SAAL,CAAe,iBAAf,EAAkC,IAAlC,EAAwC,CAAxC,CAAf;AACA,eAAG,aAAH,CAAiB,QAAjB,EAA2B,MAA3B;AACA,mBAAO,QAAQ,OAAR,CAAgB,CAAhB,CAAP;AACH,SAxBM,CAAP;AAyBH;AAhCQ,CAAb;AAkCA,OAAO,OAAP,GAAiB,IAAjB","file":"config-initializer.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst ObjectAssign = require(\"object-assign\");\nconst existSync = require(\"exists-sync\");\nconst Config = require(\"../config/config\");\nconst readPkg = require(\"read-pkg\");\nconst Logger = require(\"../util/logger\");\n\n/**\n * read package.json if found it\n * @param {string} dir\n * @returns {Promise.<Array.<String>>}\n */\nconst getTextlintDependencyNames = (dir) => {\n    return readPkg(dir).then(pkg => {\n        const dependencies = pkg.dependencies || {};\n        const devDependencies = pkg.devDependencies || {};\n        const mergedDependencies = ObjectAssign({}, dependencies, devDependencies);\n        const pkgNames = Object.keys(mergedDependencies);\n        return pkgNames.filter(pkgName => {\n            const ruleOrFilter = pkgName.indexOf(Config.FILTER_RULE_NAME_PREFIX) !== -1 || pkgName.indexOf(Config.RULE_NAME_PREFIX) !== -1;\n            if (pkgName === \"textlint-rule-helper\") {\n                return false;\n            }\n            return ruleOrFilter;\n        });\n    }).catch(() => {\n        return [];\n    });\n};\n\n/**\n * create object that fill with `defaultValue`\n * @param {Array} array\n * @param {*} defaultValue\n * @returns {Object}\n */\nconst arrayToObject = (array, defaultValue) => {\n    const object = {};\n    array.forEach(item => {\n        object[item] = defaultValue;\n    });\n    return object;\n};\n/**\n * Initializer class for config of textlint.\n */\nconst init = {\n    /**\n     * Create .textlintrc file\n     * @params {string} dir The directory of .textlintrc file\n     * @returns {Promise.<number>} The exit code for the operation.\n     */\n    initializeConfig(dir) {\n        return getTextlintDependencyNames(dir).then(pkgNames => {\n            const rcFile = \".\" + Config.CONFIG_FILE_NAME + \"rc\";\n            const filePath = path.resolve(dir, rcFile);\n            if (existSync(filePath)) {\n                Logger.error(`${ rcFile } is already existed.`);\n                return Promise.resolve(1);\n            }\n            const filters = pkgNames.filter(pkgName => {\n                return pkgName.indexOf(Config.FILTER_RULE_NAME_PREFIX) !== -1;\n            }).map(filterName => {\n                return filterName.replace(Config.FILTER_RULE_NAME_PREFIX, \"\");\n            });\n            const rules = pkgNames.filter(pkgName => {\n                return pkgName.indexOf(Config.RULE_NAME_PREFIX) !== -1;\n            }).map(filterName => {\n                return filterName.replace(Config.RULE_NAME_PREFIX, \"\");\n            });\n            const defaultTextlintRc = {\n                \"filters\": arrayToObject(filters, true),\n                \"rules\": arrayToObject(rules, true)\n            };\n            const output = JSON.stringify(defaultTextlintRc, null, 2);\n            fs.writeFileSync(filePath, output);\n            return Promise.resolve(0);\n        });\n    }\n};\nmodule.exports = init;\n"]}