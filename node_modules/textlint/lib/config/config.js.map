{"version":3,"sources":["../../src/config/config.js"],"names":[],"mappings":"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","file":"config.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst objectAssign = require(\"object-assign\");\nconst concat = require(\"unique-concat\");\nimport loadConfig from \"./config-loader\";\nimport {isPresetRuleKey} from \"../util/config-util\";\nimport {mapRulesConfig} from \"./preset-loader\";\nimport {\n    loadRulesConfig as loadRulesConfigFromPlugins,\n    loadAvailableExtensions\n} from \"./plugin-loader\";\nimport loadRulesConfigFromPresets from \"./preset-loader\";\nimport TextLintModuleResolver from \"../engine/textlint-module-resolver\";\nimport separateAvailableOrDisable from \"./separate-by-config-option\";\n/**\n * Convert config of preset to rulesConfig flat path format.\n *\n * e.g.)\n * {\n *  \"preset-a\" : { \"key\": \"value\"}\n * }\n * => {\"preset-a/key\": \"value\"}\n *\n * @param rulesConfig\n * @returns {{string: string}}\n */\nfunction convertRulesConfigToFlatPath(rulesConfig) {\n    if (!rulesConfig) {\n        return {};\n    }\n    const filteredConfig = {};\n    Object.keys(rulesConfig).forEach(key => {\n        if (isPresetRuleKey(key)) {\n            // <preset>/<rule>\n            objectAssign(filteredConfig, mapRulesConfig(rulesConfig[key], key));\n            return;\n        }\n        filteredConfig[key] = rulesConfig[key];\n    });\n    return filteredConfig;\n}\n/**\n * @type {TextLintConfig}\n */\nconst defaultOptions = Object.freeze({\n    // rule package names\n    rules: [],\n    // disabled rule package names\n    // always should start with empty\n    disabledRules: [],\n    // rules config object\n    rulesConfig: {},\n    // filter rule package names\n    filterRules: [],\n    disabledFilterRules: [],\n    // rules config object\n    filterRulesConfig: {},\n    // preset package names\n    // e.g.) [\"preset-foo\"]\n    presets: [],\n    // plugin package names\n    plugins: [],\n    // base directory for loading {rule, config, plugin} modules\n    rulesBaseDirectory: undefined,\n    // \".textlint\" file path\n    configFile: undefined,\n    // rule directories\n    rulePaths: [],\n    // available extensions\n    // if set the option, should filter by extension.\n    extensions: [],\n    // formatter file name\n    // e.g.) stylish.js => set \"stylish\"\n    // NOTE: default formatter is defined in Engine,\n    // because There is difference between TextLintEngine and TextFixEngine.\n    formatterName: undefined,\n    // --no-color\n    color: true\n});\n\n// Priority: CLI > Code options > config file\nclass Config {\n    /**\n     * @return {string} rc config filename\n     * it's name use as `.<name>rc`\n     */\n    static get CONFIG_FILE_NAME() {\n        return \"textlint\";\n    }\n\n    /**\n     * @return {string} config package prefix\n     */\n    static get CONFIG_PACKAGE_PREFIX() {\n        return \"textlint-config-\";\n    }\n\n    /**\n     * @return {string} rule package's name prefix\n     */\n    static get RULE_NAME_PREFIX() {\n        return \"textlint-rule-\";\n    }\n\n    /**\n     * @return {string} filter rule package's name prefix\n     */\n    static get FILTER_RULE_NAME_PREFIX() {\n        return \"textlint-filter-rule-\";\n    }\n\n    /**\n     * @return {string} rule preset package's name prefix\n     */\n    static get RULE_PRESET_NAME_PREFIX() {\n        return \"textlint-rule-preset-\";\n    }\n\n    /**\n     * @return {string} plugins package's name prefix\n     */\n    static get PLUGIN_NAME_PREFIX() {\n        return \"textlint-plugin-\";\n    }\n\n    /**\n     * Create config object form command line options\n     * See options.js\n     * @param {object} cliOptions the options is command line option object. @see options.js\n     * @returns {Config}\n     */\n    static initWithCLIOptions(cliOptions) {\n        const options = {};\n        options.extensions = cliOptions.ext ? cliOptions.ext : defaultOptions.extensions;\n        options.rules = cliOptions.rule ? cliOptions.rule : defaultOptions.rules;\n        // TODO: CLI --filter <rule>?\n        options.filterRules = defaultOptions.filterRules;\n        options.disabledFilterRules = defaultOptions.disabledFilterRules;\n        // TODO: CLI --disable <rule>?\n        options.disabledRules = defaultOptions.disabledRules;\n        options.presets = cliOptions.preset ? cliOptions.preset : defaultOptions.presets;\n        options.plugins = cliOptions.plugin ? cliOptions.plugin : defaultOptions.plugins;\n        options.configFile = cliOptions.config ? cliOptions.config : defaultOptions.configFile;\n        options.rulePaths = cliOptions.rulesdir ? cliOptions.rulesdir : defaultOptions.rulePaths;\n        options.formatterName = cliOptions.format ? cliOptions.format : defaultOptions.formatterName;\n        options.color = cliOptions.color !== undefined ? cliOptions.color : defaultOptions.color;\n        return this.initWithAutoLoading(options);\n    }\n    /* eslint-disable complexity */\n    // load config and merge options.\n    static initWithAutoLoading(options = {}) {\n        // Base directory\n        const rulesBaseDirectory = options.rulesBaseDirectory\n            ? options.rulesBaseDirectory\n            : defaultOptions.rulesBaseDirectory;\n        // Create resolver\n        const moduleResolver = new TextLintModuleResolver(this, rulesBaseDirectory);\n        // => ConfigFile\n        // configFile is optional\n        // => load .textlintrc\n        const configFileRawOptions = loadConfig(options.configFile, {\n                moduleResolver,\n                configFileName: this.CONFIG_FILE_NAME\n            }) || {};\n        // \"rules\" field is here!\n        const configRulesObject = separateAvailableOrDisable(configFileRawOptions.rules);\n        // \"filters\" field is here!\n        const configFilterRulesObject = separateAvailableOrDisable(configFileRawOptions.filters);\n        const configPresets = configRulesObject.presets;\n        const configFilePlugins = configFileRawOptions.plugins || [];\n        const configFileRulesConfig = convertRulesConfigToFlatPath(configFileRawOptions.rules);\n        const configFileFilterRulesConfig = convertRulesConfigToFlatPath(configFileRawOptions.filters);\n        // => Options\n        const optionRules = options.rules || [];\n        const optionFilterRules = options.filterRules || [];\n        const optionDisbaledRules = options.disabledRules || [];\n        const optionDisbaledFilterRules = options.disabledFilterRules || [];\n        const optionRulesConfig = options.rulesConfig || {};\n        const optionFilterRulesConfig = options.filterRulesConfig || {};\n        const optionPlugins = options.plugins || [];\n        const optionPresets = options.presets || [];\n        // => Merge options and configFileOptions\n        // Priority options > configFile\n        const rules = concat(optionRules, configRulesObject.available);\n        const disabledRules = concat(optionDisbaledRules, configRulesObject.disable);\n        const filterRules = concat(optionFilterRules, configFilterRulesObject.available);\n        const disabledFilterRules = concat(optionDisbaledFilterRules, configFilterRulesObject.disable);\n        const rulesConfig = objectAssign({}, configFileRulesConfig, optionRulesConfig);\n        const filterRulesConfig = objectAssign({}, configFileFilterRulesConfig, optionFilterRulesConfig);\n        const plugins = concat(optionPlugins, configFilePlugins);\n        const presets = concat(optionPresets, configPresets);\n        const mergedOptions = objectAssign({}, options, {\n            rules,\n            disabledRules,\n            rulesConfig,\n            filterRules,\n            disabledFilterRules,\n            filterRulesConfig,\n            plugins,\n            presets\n        });\n        return new this(mergedOptions);\n    }\n\n    /**\n     * initialize with options.\n     * @param {TextLintConfig} options the option object is defined as TextLintConfig.\n     * @returns {Config}\n     * @constructor\n     */\n    constructor(options = {}) {\n        /**\n         * @type {string|null} path to .textlintrc file.\n         */\n        this.configFile = options.configFile;\n        this.rulesBaseDirectory = options.rulesBaseDirectory\n            ? options.rulesBaseDirectory\n            : defaultOptions.rulesBaseDirectory;\n        // rule names that are defined in ,textlintrc\n        const moduleResolver = new TextLintModuleResolver(this.constructor, this.rulesBaseDirectory);\n        /**\n         * @type {string[]} rule key list\n         * but, plugins's rules are not contained in `rules`\n         * plugins's rule are loaded in TextLintEngine\n         */\n        this.rules = options.rules ? options.rules : defaultOptions.rules;\n        /**\n         * @type {string[]} rule key list\n         * These rule is set `false` to options\n         */\n        this.disabledRules = options.disabledRules ? options.disabledRules : defaultOptions.disabledRules;\n        /**\n         * @type {string[]} filter rule key list\n         */\n        this.filterRules = options.filterRules ? options.filterRules : defaultOptions.filterRules;\n        /**\n         * @type {string[]} rule key list\n         * These rule is set `false` to options\n         */\n        this.disabledFilterRules = options.disabledFilterRules ? options.disabledFilterRules : defaultOptions.disabledFilterRules;\n        /**\n         * @type {string[]} preset key list\n         */\n        this.presets = options.presets ? options.presets : defaultOptions.presets;\n        // => load plugins\n        // this.rules has not contain plugin rules\n        // =====================\n        this.plugins = options.plugins ? options.plugins : defaultOptions.plugins;\n        // rulesConfig\n        const pluginRulesConfig = loadRulesConfigFromPlugins(this.plugins, moduleResolver);\n        const presetRulesConfig = loadRulesConfigFromPresets(this.presets, moduleResolver);\n        this.rulesConfig = objectAssign({}, presetRulesConfig, pluginRulesConfig, options.rulesConfig);\n\n        // filterRulesConfig\n        this.filterRulesConfig = options.filterRulesConfig || defaultOptions.filterRulesConfig;\n        /**\n         * @type {string[]}\n         */\n        this.extensions = options.extensions ? options.extensions : defaultOptions.extensions;\n        // additional availableExtensions from plugin\n        const additionalExtensions = loadAvailableExtensions(this.plugins, moduleResolver);\n        this.extensions = this.extensions.concat(additionalExtensions);\n        /**\n         * @type {string[]}\n         */\n        this.rulePaths = options.rulePaths ? options.rulePaths : defaultOptions.rulePaths;\n        /**\n         * @type {string}\n         */\n        this.formatterName = options.formatterName ? options.formatterName : defaultOptions.formatterName;\n        /**\n         * @type {boolean}\n         */\n        this.color = options.color !== undefined ? options.color : defaultOptions.color;\n    }\n    /* eslint-enable complexity */\n\n    toJSON() {\n        const r = Object.create(null);\n        Object.keys(this).forEach(key => {\n            if (!this.hasOwnProperty(key)) {\n                return;\n            }\n            const value = this[key];\n            if (value == null) {\n                return;\n            }\n            r[key] = typeof value.toJSON !== \"undefined\" ? value.toJSON() : value;\n        });\n        return r;\n    }\n}\nmodule.exports = Config;\n"]}