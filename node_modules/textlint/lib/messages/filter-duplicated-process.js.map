{"version":3,"sources":["../../src/messages/filter-duplicated-process.js"],"names":[],"mappings":";AACA;;;;;;;;;kBAewB,wB;AAVxB,IAAM,iBAAiB,SAAjB,cAAiB,CAAC,QAAD,EAAW,QAAX,EAAwB;AAC3C,WAAO,SAAS,KAAT,KAAmB,SAAS,KAA5B,IACH,SAAS,QAAT,KAAsB,SAAS,QAD5B,IAEH,SAAS,OAAT,KAAqB,SAAS,OAFlC;AAGH,CAJD;;;;;;AAUe,SAAS,wBAAT,GAAiD;AAAA,QAAf,QAAe,yDAAJ,EAAI;;AAC5D,WAAO,SAAS,MAAT,CAAgB,UAAC,OAAD,EAAU,KAAV,EAAoB;AACvC,YAAM,eAAe,SAAS,KAAT,CAAe,QAAQ,CAAvB,CAArB;AACA,eAAO,CAAC,aAAa,IAAb,CAAkB,uBAAe;AACrC,mBAAO,eAAe,OAAf,EAAwB,WAAxB,CAAP;AACH,SAFO,CAAR;AAGH,KALM,CAAP;AAMH","file":"filter-duplicated-process.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/**\n * @param {TextLintMessage} aMessage\n * @param {TextLintMessage} bMessage\n */\nconst isEqualMessage = (aMessage, bMessage) => {\n    return aMessage.index === bMessage.index &&\n        aMessage.severity === bMessage.severity &&\n        aMessage.message === bMessage.message;\n};\n/**\n * filter duplicated messages\n * @param {TextLintMessage[]} messages\n * @returns {TextLintMessage[]} filtered messages\n */\nexport default function filterDuplicatedMessages(messages = []) {\n    return messages.filter((message, index) => {\n        const restMessages = messages.slice(index + 1);\n        return !restMessages.some(restMessage => {\n            return isEqualMessage(message, restMessage);\n        });\n    });\n}\n"]}