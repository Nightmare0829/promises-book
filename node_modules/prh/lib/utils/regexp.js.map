{"version":3,"file":"regexp.js","sourceRoot":"","sources":["regexp.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar regexpRegexp = /^\\/(.*)\\/([gimy]*)$/;\n\nvar hankakuAlphaNum = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\nvar zenkakuAlphaNum = \"ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ０１２３４５６７８９\";\n\n// http://www.tamasoft.co.jp/ja/general-info/unicode.html\nexport var jpHira = /[ぁ-ゖ]/;\nexport var jpKana = /[ァ-ヺ]/;\n// http://tama-san.com/?p=196\nexport var jpKanji = /(?:[々〇〻\\u3400-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF])/;\nexport var jpChar = combine(jpHira, jpKana, jpKanji);\n\nvar regexpSpecialChars = \"¥*+.?{}()[]^$-|/\".split(\"\");\n\nexport function concat(...args: (string | RegExp)[]): RegExp {\n    \"use strict\";\n\n    var result = args.reduce<string>((p, c) => {\n        if (typeof c === \"string\") {\n            return p + c;\n        } else if (c instanceof RegExp) {\n            return p + c.source;\n        } else {\n            throw new Error(\"unknown type: \" + c);\n        }\n    }, \"\");\n    return new RegExp(result);\n}\n\nexport function combine(...args: (string | RegExp)[]): RegExp {\n    \"use strict\";\n\n    var result = args.map(arg => {\n        if (typeof arg === \"string\") {\n            return arg;\n        } else if (arg instanceof RegExp) {\n            return arg.source;\n        } else {\n            throw new Error(\"unknown type: \" + arg);\n        }\n    }).join(\"|\");\n    return concat(\"(?:\", result, \")\");\n}\n\nexport function addBoundary(arg: string | RegExp): RegExp {\n    \"use strict\";\n\n    var result: string;\n    if (typeof arg === \"string\") {\n        result = arg;\n    } else if (arg instanceof RegExp) {\n        result = arg.source;\n    } else {\n        throw new Error(\"unknown type: \" + arg);\n    }\n    return concat('\\\\b', result, '\\\\b');\n}\n\nexport function parseRegExpString(str: string): RegExp {\n    \"use strict\";\n\n    var result = str.match(regexpRegexp);\n    if (!result) {\n        return null;\n    }\n    return new RegExp(result[1], result[2]);\n}\n\nexport function spreadAlphaNum(str: string): RegExp {\n    \"use strict\";\n\n    var result = str.split(\"\").map(v => {\n        var tmpIdx1 = hankakuAlphaNum.indexOf(v.toUpperCase());\n        var tmpIdx2 = hankakuAlphaNum.indexOf(v.toLowerCase());\n        if (tmpIdx1 === -1 && tmpIdx2 === -1) {\n            // not alpha num\n            return v;\n        } else if (tmpIdx1 === tmpIdx2) {\n            // num\n            return \"[\" + v + zenkakuAlphaNum.charAt(tmpIdx1) + \"]\";\n        } else {\n            return \"[\" + v.toUpperCase() + v.toLowerCase() + zenkakuAlphaNum.charAt(tmpIdx1) + zenkakuAlphaNum.charAt(tmpIdx2) + \"]\";\n        }\n    }).join(\"\");\n    return new RegExp(result);\n}\n\nexport function addDefaultFlags(regexp: RegExp) {\n    \"use strict\";\n\n    var flags = \"gm\";\n    if (regexp.ignoreCase) {\n        flags += \"i\";\n    }\n    return new RegExp(regexp.source, flags);\n}\n\nexport function escapeSpecialChars(str: string): string {\n    \"use strict\";\n\n    regexpSpecialChars.forEach(char => {\n        str = str.replace(new RegExp(\"\\\\\" + char, \"g\"), \"\\\\\" + char);\n    });\n    return str;\n}\n\nexport function collectAll(regexp: RegExp, src: string) {\n    \"use strict\";\n\n    if (!regexp.global) {\n        throw new Error(\"g flag is required\");\n    }\n    var resultList: RegExpExecArray[] = [];\n    var result: RegExpExecArray;\n    do {\n        result = regexp.exec(src);\n        if (result) {\n            resultList.push(result);\n        }\n    } while (result);\n\n    return resultList;\n}\n\nexport function equals(a: RegExp, b: RegExp) {\n    \"use strict\";\n\n    if (a.source !== b.source) {\n        return false;\n    }\n    if (a.global !== b.global) {\n        return false;\n    }\n    if (a.ignoreCase !== b.ignoreCase) {\n        return false;\n    }\n    if (a.multiline !== b.multiline) {\n        return false;\n    }\n\n    return true;\n}\n"]}